;jQuery( function() {
    // 工具提示
	if($('[data-toggle="tooltip"]')[0]) {
		$('[data-toggle="tooltip"]').tooltip({
			"container" : 'body',
		});
	}
    
    // POP弹出框
    if($('[data-toggle="popover"]')[0]) {
        $('[data-toggle="popover"]').popover();
    }
  
    // 关闭卡片
    $(document).on('click', '.card-btn-close', function() {
        $(this).closest('.card').fadeOut(150, function() {
            if ($(this).parent().children().length == 1) {
                $(this).parent().remove();
            } else {
                $(this).remove();
            }
        });
    });
  
    // 卡片收缩与打开
    $(document).on('click', '.card-btn-slide', function(){
        $(this).toggleClass('rotate-180').closest('.card').find('.card-body').slideToggle();
    });
  
    /**
     * 如果页面中需要用到滚动条，请先导入perfect-scrollbar.min.js
     */ 
    if($('.lyear-scroll')[0]) {
        $('.lyear-scroll').each(function(){
            new PerfectScrollbar(this, {
	        	swipeEasing: false,
	        	suppressScrollX: true
	        });
        });
    }
    
    // 颜色选取
	jQuery('.js-colorpicker').each(function() {
		var $colorpicker = jQuery(this);
		var $colorpickerMode = $colorpicker.data('colorpicker-mode') ? $colorpicker.data('colorpicker-mode') : 'auto';
		$colorpicker.colorpicker({
			'format': $colorpickerMode,
		});
	});
    
    // 日期选择器
    jQuery("[data-provide = 'datepicker']").each(function() {
        var options = {
            language: 'zh-CN',  // 默认简体中文
            multidateSeparator: ', ' // 默认多个日期用,分隔
        }
  
        options = $.extend( options, getDataOptions( $(this) ));
  
        if ( $(this).prop("tagName") != 'INPUT' ) {
            options.inputs = [$(this).find('input:first'), $(this).find('input:last')];
        }
  
        $(this).datepicker(options);
    });
    
    // 时间选择器
    jQuery("[data-provide = 'clockpicker']").each(function() {
        $(this).clockpicker({
            donetext: 'Done'
        });
    });
    
    // 时间日期选择器
    jQuery("[data-provide = 'datetimepicker']").each(function() {
        var options = {
            locale: moment.locale(),
        }
  
        options = $.extend( options, getDataOptions( $(this) ));
  
        if ( $(this).prop("tagName") != 'INPUT' ) {
            options.inputs = [$(this).find('input:first'), $(this).find('input:last')];
        }
        console.log(options);
        $(this).datetimepicker(options);
    });
    
    // 标签
	$('.js-tags-input').each(function() {
        var $this = $(this);
        $this.tagsInput({
			height: $this.data('height') ? $this.data('height') : '36px',
			width: '100%',
			defaultText: $this.attr("placeholder"),
			removeWithBackspace: true,
			delimiter: [',']
		});
    });
  
    // 复选框全选
	$("#check-all").change(function () {
        if ($boxname = $(this).data('name')) {
            $(this).closest('table').find("input[name='" + $boxname + "']").prop('checked', $(this).prop("checked"));
        } else {
            $(this).closest('table').find(".custom-checkbox input[type='checkbox']").prop('checked', $(this).prop("checked"));
        }
	});
    
    // iframe打开tab
 	$(document).on('click', '.js-create-tab', function(){
 	    parent.$(parent.document).data('multitabs').create({
 	        iframe : true,
 	        title : $(this).data('title') ? $(this).data('title') : '标题',
 	        url : $(this).data('url') ? $(this).data('url') : 'lyear-main.html'
 	    }, true);
 	});
    
});


// 参考国外模板的写法，获取当前的配置，以data-*（*指插件原有的配置名）
getDataOptions = function(el, castList) {
    var options = {};
    
    $.each( $(el).data(), function(key, value){
    
        key = dataToOption(key);
        
        if ( key == 'provide' ) {
            return;
        }
        options[key] = value;
    });
    
    return options;
}

dataToOption = function(name) {
    return name.replace(/-([a-z])/g, function(x){return x[1].toUpperCase();});
}


Vue.mixin({
    methods:{
        load(){
            layer.load(0);
            // this.loadingEl = document.createElement("div");
            // document.body.prepend(this.loadingEl);
            // this.loadingEl.classList.add("page-loader");
            // this.loadingEl.classList.add("flex-column");
            // this.loadingEl.style.backgroundColor = 'rgb(192 192 192 / 50%)'
            // this.loadingEl.classList.add("bg-opacity-25");
            // this.loadingEl.innerHTML = `
            //     <span class="spinner-border text-primary" role="status"></span>
            //     <span class="text-gray-800 fs-6 fw-semibold mt-5">Loading...</span>
            // `;
        },
        closeLoad(){
            layer.closeAll();
        },
        post(url,data,cb){
            if(typeof url === 'object'){
                url = '';
            }
            this.load();
            $.post(url,data,res=>{
                this.closeLoad();
                cb ? cb(res):this.alert(res);
            })
        },
        ajax(url, data, cb) {
            if(typeof url === 'object'){
                url = '';
            }
            this.load();
            $.ajax({
                url: url,
                data: data,
                type: 'POST',
                dataType: 'JSON',
                cache: false,
                processData: false,
                contentType: false,
                success: res=>{
                    this.closeLoad();
                    cb && cb(res);
                }
            })
        },
        alert(res,cb){
            console.log(res.msg)
            Swal.fire({
                title: res.code == 1 ? 'success' : 'error',
                type: res.code == 1 ? 'success' : 'error',
                html: res.msg,
                allowOutsideClick: false,
                customClass: {
                  confirmButton: 'btn' + (res.code == 1 ? ' btn-primary' : ' btn-danger')
                }
            }).then(function (isConfirm) {
                if (isConfirm.value === true) {
                    cb && cb(res);
                    if (res.url !== undefined && res.url) {
                        // if (res.data._blank == 1) {
                        //     top.location.href = res.url;
                        // } else {
                            window.location.href = res.url
                        // }
                    }
                }
            });
        },
        recursion(data,list,key){
            for(k in list){
                let keykk = key + '['+k+']';
                if(typeof list[k]==='object'){
                    if(list[k] instanceof File){
                        console.log(k)
                        data.append(keykk, list[k])
                    }else{
                        this.recursion(data,list[k],keykk)
                    }
                }else{
                    data.append(keykk,list[k]);
                }
            }
        },
        submit(url){
            let data = new FormData()
            for (k in this.form) {
                if(typeof this.form[k]==='object'){
                    if(this.form[k] instanceof File){
                        data.append(k, this.form[k])
                    }else{
                        this.recursion(data,this.form[k],k);
                    }
                }else{
                    data.append(k, this.form[k])
                }
            }
            this.ajax('', data, res => {
                if (res.msg) {
                    this.alert(res)
                }
            });
        },
        nonce_str(len) {
            len = len || 32;
            var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/
            var maxPos = $chars.length;
            var pwd = '';
            for (i = 0; i < len; i++) {
                pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
            }
            return pwd;
        },
        confirm(msg, cb){
            Swal.fire({
                
                
                title: 'warning',
                type: 'error',
                html: msg,
                showCancelButton: true,
                allowOutsideClick: false,
                confirmButtonText: 'OK',
                cancelButtonText: 'cancel'
            }).then(function (isConfirm) {
                if (isConfirm.value === true) {
                  cb && cb();
                }
            });
        },
        del(where,url='del') {
            // if(url=='del'){
            //     url = controller+'/'+url;
            // }
            this.confirm('确定要删除吗???', () => {
                this.post(url, where,res=>{
                    this.alert(res,()=>{
                        location.reload();
                    });
                })
            })
        },
        prompt(queue, cb) {
            let _this = this;
            let progressSteps = [];
            for (k in queue) {
                progressSteps[k] = parseInt(k) + 1;
            }
            Swal.mixin({
                allowOutsideClick: false,
                input: 'text',
                confirmButtonText: 'OK',
                showCancelButton: true,
                cancelButtonText: 'cancel',
                progressSteps
            }).queue(queue).then(function (result) {
                if (result.dismiss)
                    return;
                for(let k in result.value){
                    if(result.value[k]==''){
                        _this.alert({ code: 0, msg: queue[k] })
                        return;
                    }
                }
                cb && cb(result.value)
            })
        },
        getObjectURL(file) {
            var url = null;
            if (window.createObjectURL != undefined) { // basic
              url = window.createObjectURL(file);
            } else if (window.URL != undefined) { // mozilla(firefox)
              url = window.URL.createObjectURL(file);
            } else if (window.webkitURL != undefined) { // webkit or chrome
              url = window.webkitURL.createObjectURL(file);
            }
            return url;
        }
    }
})